# database.py
import sqlite3

def connect():
    return sqlite3.connect("appointments.db")

def create_tables():
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS customers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                phone TEXT NOT NULL
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS services (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                price REAL NOT NULL
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS appointments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                customer_id INTEGER,
                date TEXT NOT NULL,
                time TEXT NOT NULL,
                service_id INTEGER,
                status TEXT NOT NULL DEFAULT 'Pendiente',
                FOREIGN KEY (customer_id) REFERENCES customers (id),
                FOREIGN KEY (service_id) REFERENCES services (id)
            )
        ''')
        conn.commit()

# Insert or update a customer based on name and phone
def insert_or_update_customer(name, phone, customer_id=None):
    with connect() as conn:
        cursor = conn.cursor()
        if customer_id is not None:
            cursor.execute("UPDATE customers SET name = ? WHERE id = ?", (name, customer_id))
        else:
            cursor.execute("INSERT INTO customers (name, phone) VALUES (?, ?)", (name, phone))
            customer_id = cursor.lastrowid
        conn.commit()
        return customer_id

# Insert a new appointment and save to service history
def insert_appointment(customer_id, date, time, service_id, status):
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO appointments (customer_id, date, time, service_id, status) VALUES (?, ?, ?, ?, ?)',
                       (customer_id, date, time, service_id, status))
        conn.commit()

# Retrieve all appointments including customer name and service name
def get_all_appointments():
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT a.id, c.name, c.phone, a.date, a.time, s.name, a.status
            FROM appointments a
            JOIN customers c ON a.customer_id = c.id
            JOIN services s ON a.service_id = s.id
        ''')
        return cursor.fetchall()

# Retrieve the service history of a customer by customer ID
def get_service_history(customer_id):
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT s.name, a.date, a.time
            FROM appointments a
            JOIN services s ON a.service_id = s.id
            WHERE a.customer_id = ?
        ''', (customer_id,))
        return cursor.fetchall()

# Insert a new service with a price
def insert_service(name, price):
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO services (name, price) VALUES (?, ?)", (name, price))
        conn.commit()

# Update a service by ID
def update_service(service_id, name, price):
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE services SET name = ?, price = ? WHERE id = ?", (name, price, service_id))
        conn.commit()

# Delete a service by ID
def delete_service(service_id):
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM services WHERE id = ?", (service_id,))
        conn.commit()

# Get all services
def get_all_services():
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM services')
        return cursor.fetchall()

# Get a service price by name
def get_service_price(service_name):
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT price FROM services WHERE name = ?', (service_name,))
        result = cursor.fetchone()
        return result[0] if result else None

# Get all customers
def get_all_customers():
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM customers')
        return cursor.fetchall()

# Find a customer by name and phone for autocomplete
def find_customer_by_name(name):
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM customers WHERE name = ?', (name,))
        return cursor.fetchone()

# Delete a customer by ID
def delete_customer(customer_id):
    with connect() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM customers WHERE id = ?", (customer_id,))
        conn.commit()
